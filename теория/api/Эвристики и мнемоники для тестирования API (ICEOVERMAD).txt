Эвристики и мнемоники для тестирования API (ICEOVERMAD)


Эвристики и мнемоники для тестирования API
ICEOVERMAD
Ash Winter, автор блога, в своей статье «Johnny Mnemonic — ICEOVERMAD» создал и описал мнемоническую схему для тестирования API сервиса, которая покрывает его ключевые области и является весьма эффективным и быстрым методом.

Существует некий набор критериев («эвристика»), которым продукт должен отвечать. 
Для оценки API можно определить разные составляющие: 
это будет зависеть от того, что из себя представляет ваш конкретный API (библиотека или REST-сервис).

Integration (интеграция)

Как пользователи будут интегрироваться с сервисом?
Через API или графический интерфейс?
Consumers (пользователи)

Кто является пользователем сервиса?
Конечный пользователь — человек или машина?
Какие проблемы пользователя решает ваш сервис?
Endpoints (точки доступа)

Какие у вас есть эндпоинты?
Эндпоинт единственный или есть еще?
Если их несколько, идет ли подключение через балансировщик?
Какой уровень защиты нужно обеспечить?
Operations (операции)

Какие операции выполняет бизнес через сервис?
Есть ли аналогичные функции в пользовательском интерфейсе?
У функции понятное название?
Volume (объем)

Какой объем запросов к нам придет?
Это будет постоянная нагрузка или редкие запросы с большим объемом данных?
Какой объем одной транзакции?
Архитектура кластерная или нет?
Error Handling (обработка ошибок)

Как сервис будет обрабатывать ошибки на стороне сервера?
Как сервис будет обрабатывать ошибки на стороне клиента?
Являются ли сообщения об ошибках информативными и подробными?
Как обрабатывается потерянная связь с базой данных?
RESTful

Обладает ли сервис характеристиками RESTful-сервиса?
Modularity (модульность)

Как распределяются компоненты в данном сервисе?
Как они взаимодействуют между собой?
Могут ли они существовать отдельно друг от друга?
Может ли один из модулей сервиса стать причиной сбоя в работе другого модуля?
Authentication (аутентификация)

Какая аутентификация используется?
Какой уровень защищенности?
Шифруется ли информация или отправляется в незащищенном виде?
Definitions (определения)

Что описывают данные на входе и выходе сервиса, что у нас есть?
Какие HTTP-методы используются?