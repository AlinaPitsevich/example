Отличия тестирование на удобство пользования и тестирования доступности  Usability Vs Accessibility testing


USABILITY testing показывает, насколько проста в использовании и удобна система программного обеспечения. Здесь небольшой набор целевых конечных пользователей «использует» программную систему для выявления дефектов юзабилити. Основное внимание в этом тестировании уделяется простоте использования приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта (UX – "Ю-Экс", user experience). Это тестирование рекомендуется на начальном этапе разработки SDLC, что позволяет лучше понять ожидания пользователей. Исследования (Virzi, 1992 и Neilsen Landauer, 1993) показывают, что 5 пользователей достаточно для выявления 80% проблем с юзабилити, хотя некоторые исследователи предлагают другие цифры. 


Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования. Его цель - убедиться в том, что наш продукт удобен в использовании для людей с различными видами инвалидности или особенностей восприятия. Это могут быть проблемы со зрением, слухом или ограничения в подвижности рук.  Ваш продукт должен правильно работать с соответствующим ПО. Примеры такого программного обеспечения:
Speech Recognition Software - ПО преобразует произнесенное слово в текст, который служит вводом для компьютера. 
Программа для чтения с экрана - используется для озвучивания текста, отображаемого на экране 
Программное обеспечение для увеличения экрана - используется для увеличения масштаба элементов и облегчения чтения для пользователей с нарушениями зрения. 
Специальная клавиатура, облегчающая ввод для пользователей, у которых проблемы с двигательными функциями.
Еще один из примеров - люди с цветовой слепотой (дальтонизмом). Эта особенность довольно широко распространена. Различными видами цветовой слепоты страдают около 8 % мужчин и 0,4 % женщин - не так уж мало! Цвет не должен быть единственным способом передачи информации. Если вы используете цвет для того, чтобы, допустим, отобразить статус, эту информацию стоит продублировать еще каким-то образом - геометрическими фигурами, иконками или текстовым комментарием. Хорошая контрастность. Хорошая контрастность обеспечивает нормальную видимость элементов управления и текста даже для людей, не различающих те или иные оттенки.

Пример чек-листа:
Предоставляет ли приложение клавиатурные эквиваленты для всех действий мышью и окон? 
Предоставляются ли инструкции как часть пользовательской документации или руководства? Легко ли понять и использовать приложение, используя документацию? 
Упорядочены ли вкладки логически для обеспечения плавной навигации? 
Предусмотрены ли сочетания клавиш для меню? 
Поддерживает ли приложение все операционные системы? 
Четко ли указано время отклика каждого экрана или страницы, чтобы конечные пользователи знали, как долго ждать? 
Все ли надписи правильно написаны? 
Являются ли цвета подходящим для всех пользователей? 
Правильно ли используются изображения или значки, чтобы их было легко понять конечным пользователям? 
Есть ли звуковые оповещения? 
Может ли пользователь настроить аудио или видео элементы управления? 
Может ли пользователь переопределить шрифты по умолчанию для печати и отображения текста? 
Может ли пользователь настроить или отключить мигание, вращение или перемещение элементов? 
Убедитесь, что цветовое кодирование никогда не используется в качестве единственного средства передачи информации или указания на действие 
Видна ли подсветка с инвертированными цветами? 
Тестирование цвета в приложении путем изменения контрастности 
Правильно ли слышат люди с ограниченными возможностями все имеющее отношение к аудио и видео?
Протестируйте все мультимедийные страницы без мультимедиа-оборудования. 
Предоставляется ли обучение пользователям с ограниченными возможностями, что позволит им ознакомиться с программным обеспечением или приложением?