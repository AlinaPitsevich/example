Эвристики и мнемоники для тестирования API (LH Traffic)

Полезная мнемоническая схема от SZEKAR1, автора блога, которую можно объяснить как «левый трафик», или Lufthansa Traffic (для более простого запоминания) — left-handed traffic.

Leaky APIs (дырявые API) — это APIs, что предоставляют информацию, которую не должны были бы.

Должны ли видеть пользователи весь объем информации, который вы им отправляете?
Есть ли какая-либо конфиденциальная информация, которую не стоит показывать пользователям?
Обратите особое внимание на заголовки ответов — не содержится ли в них больше информации, чем должно быть?
Hidden APIs (скрытые API) — это APIs, которые, по мнению разработчиков, вообще никто никогда не должен обнаружить. Убедитесь в том, что эндпоинты, предназначенные для внутреннего использования, не находятся в свободном доступе.

Используете ли вы для документирования вашего API Swagger или любой другой подобный ресурс?
Что, если в нем описаны не только публичные эндпоинты?
Не содержится ли в теле ответа для других запросов URL на более детальное описание вашего ресурса или приватного, предназначенного только для внутреннего использования, API?
А что по поводу логов на сервере?
Много ли в них приватных APIs, которые вы бы не хотели показывать клиентам?
Tampering Requests/Responses (поддельные запросы/ответы)

Где ваша команда размещает валидацию параметров, которые отправляются в API-запросах?
Если ответ от сервера может быть перехвачен — ваш фронтенд может подвергнуться атаке.
Authorization / Authentication (авторизация / аутентификация)

Какой тип авторизации поддерживает ваш API?
Можете ли вы обойтись без него?
Можете ли использовать другие?
Если используется комбинация: имя пользователя / пароль, отправляется ли она в формате plain text?
Как часть самого URL или как payload?
Что если комбинация имя пользователя / пароль недоступна?
Какой статус-код возвращается?
Какая ошибка выводится в сообщении?
Она аналогична той, что вы получаете в случаях ввода неправильного имени пользователя и неправильного пароля?
Можете ли вы получить весь список имен пользователей?
Какое время ответа для допустимой/недопустимой комбинации?
Можете ли вы получить доступ к ресурсам, на которые у вас нет прав для просмотра?
Если вы используете в запросах токены, могут ли они использоваться повторно?
Какое время жизни у ваших токенов?
Можно ли их сгенерировать самостоятельно?
Fuzzing (Fuzz testing — фаззинг-тестирование). Начните фаззинг-тестирование вашего API с использования невалидных и случайных данных, отправки неожидаемых системой значений в вашем API и обратите внимание на результаты тестов — не сломают ли они систему? Протестируйте с разнообразными наборами данных, цифр, букв, строк, символов.

Forgotten (забытое)

Не осталось ли каких-либо дефолтных заголовков вне вашего запроса?
Доступен ли ваш Swagger (или другой аналогичный сервер для генерации и хранения API-документации)?
Является ли он публичным?
Возможно, он доступен только для вашего Dev-окружения, а затем кто-то мог забыть отключить его для production?
Injections (инъекции). Все мы знакомы с SQL-инъекциями, верно? Можно также попробовать применить инъекции команд ОС («внедрение кода») для разных точек входа запроса: из заголовков, через параметры, в теле запроса (не ограничиваясь только XML или JSON).

Content-Type (заголовок-сущность)

Соответствует ли Content-Type вашего заголовка типу MIME, который вы отправили в запросе?
Какой будет ответ приложения на полученный неподдерживаемый Content-Type?
Поддерживаете ли вы более одного Content-Type (например, JSON и XML)?
Одинаковые ли ответы для обоих кейсов?
Соответствует ли обработка запросов бизнес-логике работы продукта?
В случае передачи файлов проверяете ли вы только Content-Type и/или расширение файла?